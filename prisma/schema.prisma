// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  age              Int
  salary           Float
  reserve          Float
  financialProfile FinancialProfile?
  expense          Expense[]
  dailyBudget      DailyBudget[]
  category         Category[]

  @@map("users")
}

model FinancialProfile {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  userId      Int    @unique
  user        User   @relation(fields: [userId], references: [id])

  @@map("financial_profiles")
}

model Expense {
  id            Int         @id @default(autoincrement())
  value         Float
  date          DateTime
  description   String
  categoryId    Int
  userId        Int
  dailyBudgetId Int
  user          User        @relation(fields: [userId], references: [id])
  dailyBudget   DailyBudget @relation(fields: [dailyBudgetId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model DailyBudget {
  id      Int       @id @default(autoincrement())
  date    DateTime
  value   Float
  status  String
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
  expense Expense[]

  @@map("daily_budgets")
}

model Category {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  name        String
  description String
  user        User      @relation(fields: [userId], references: [id])
  expense     Expense[]

  @@map("categories")
}
